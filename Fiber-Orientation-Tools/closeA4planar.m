function A4 = closeA4planar(A2, version, varargin)
%A4 = CLOSEA4PLANAR(A2, VERSION) gives the fourth-order orientation tensor
%    A4 as a function of the second-order tensor A2.  VERSION is a single
%    character that determines the closure approximation to use.  The code
%    currently accepts A2 as 2x2, or as 3x3 with the assumption that
%    A2(i,3) = A2(3,j) = 0.  A4 is returned as 3x3.
%
%    Available values of VERSION are:
%      A  Angle-ply two-angle closure (lower bound; not recommended)
%      B  Bingham closure
%      C  Cross-ply two-angle closure (upper bound; not recommended)
%      D  Fits to distribution function calcs. in planar elongation.
%         In this case CI must also be supplied as an input argument.
%      E  Ellipse-radius distribution
%      F  Fitted, non-orthotropic closure.  Both CI and D must be supplied.
%      H  Hybrid closure of Advani and Tucker
%      L  Linear closure
%      N  Natural closure of Verleye and Dupret
%      M  Mixed closure of Kuzmin (2018)
%      Q  Quadratic closure
%

% Ensure that A2 has standard 2-D size
[rows, cols] = size(A2);
if rows == 3 && cols == 3
    % Make A2 2x2
    A2 = A2(1:2, 1:2);
elseif rows == 2 && cols == 2
    % Normal case; no action required
else
    error('A2 must be 2x2 or 3x3')
end

% The main function is a "switch" statement, based on the version
switch upper(version(1))
    
    case {'Q','L','H'} % --- Quadratic, Linear and Hybrid closures ---
        % Quadratic closure
        Av  = tens2vec(A2);    % makes a 3x1 column vector
        A4Q = Av*Av';          % Quad closure in 3x3 matrix form
        
        % Linear closure
        Iexp = [1 2 1];      % These two arrays expand M to (I,J), ...
        Jexp = [1 2 2];      % or N to (K,L)
        I2   = eye(2);       % 2nd order identity tensor
        A4L  = zeros(3);
        % Form the linear closure, A4L
        for m = 1:3          
            for n = 1:3       
                i = Iexp(m);
                j = Jexp(m);
                k = Iexp(n);
                l = Jexp(n);  % A4L(m,n) will contain the tensor component ijkl
                A4L(m,n) = -(1/24)* ...
                    (I2(i,j)*I2(k,l) + I2(i,k)*I2(j,l) + I2(i,l)*I2(j,k) ) ...
                    + (1/6)* ...
                    ( A2(i,j)*I2(k,l) + A2(i,k)*I2(j,l) + A2(i,l)*I2(j,k) ...
                    + I2(i,j)*A2(k,l) + I2(i,k)*A2(j,l) + I2(i,l)*A2(j,k) );
            end
        end
        
        % Combine the two forms
        switch upper(version(1))
            case 'Q', f = 1;                   % quadratic closure
            case 'L', f = 0;                   % linear closure
            case 'H', f = 2*trace(A2*A2) - 1;  % planar hybrid
            otherwise, error('Should not reach this statememt')
        end
        A4 = f*A4Q + (1-f)*A4L;
        
        
    otherwise   % ---- Form an EBOF (orthotropic) closure ----
        
        %---- Principal values and axes of A2 ----
        [Evals, R] = eigsort(A2);
        
        %---- Build A4 in principal axes -------
        A4 = zeros(3);
        
        %-- Fill in components on the main diagonal
        switch upper(version(1))
            
            case 'N'   % --- Natural closure (my book, Eqns. (5.68-5.70))
                A4(1,1) = Evals(1) * (1+Evals(1)) / 2;
                A4(2,2) = (1-Evals(1)) * (2-Evals(1)) / 2;
                A4(3,3) = Evals(1) * (1-Evals(1)) / 2;  
                
            case 'A'   % --- Angle-ply/lower-bound EBOF closure
                A4(1,1) = Evals(1)^2;
                A4(2,2) = (1-Evals(1))^2;
                A4(3,3) = Evals(1) * (1-Evals(1));   
                
            case 'C'   % --- Crossply/upper-bound EBOF closure
                A4(1,1) = Evals(1);
                A4(2,2) = (1-Evals(1));
                A4(3,3) = 0;   
                
            case 'M'   % --- Mixed closure of Kuzmin (2018)
                if Evals(1) <= 0.75
                    % Use the linear closure
                    A4(1,1) = Evals(1) - 0.125;
                else
                    % Use Kuzmin's 2-D smooth closure, which interpolates
                    % Abar_{1111} linearly from the lower bound at planar
                    % isotropy to fully aligned state.
                    A4(1,1) = -0.5 + 1.5*Evals(1);
                end
                % Fill in remaining components by normalization
                A4(3,3) = Evals(1) - A4(1,1);
                A4(2,2) = 1 - Evals(1) - A4(3,3);
                
            case 'B'   % --- Bingham closure
                % Coefficients of 5th-order polynomial fit for eta1(lambda)
                % These are arranged in descending order.
                a = [10.382393969774123, -33.861502540518408, ...
                     44.128462620685468, -28.900535049418998, ...
                      9.500421934963594,  -1.249240935485774];
                eta1 = polyval(a, Evals(1));
                A4(1,1) = Evals(1) * (1+Evals(1)) / 2     + eta1;
                A4(2,2) = (1-Evals(1)) * (2-Evals(1)) / 2 + eta1;
                A4(3,3) = Evals(1) * (1-Evals(1)) / 2     - eta1;   
                
            case 'D'   % --- Fitted to PEF transient calculations
                % Coefficients of 5th-order polynomial fit for eta1(lambda)
                % These are arranged in descending order, and depend on CI.
                if nargin >= 3
                    CI = varargin{1};
                else
                    error('Must supply CI on input for D type closure')
                end
                switch CI % Set the polynomical coefficients for the fit
                    case 1.0  % Third-order fit for this CI
                        a = [-2.265330798315779, ...
                              3.254982049689859, ...
                             -1.553826242350369, ...
                              0.246333958542192];
                    case 0.50 % Fourth-order fit for this CI
                        a = [ 4.602578273261631, ...
                             -11.636723364422219, ...
                             10.525602062546762, ...
                             -4.098393629917666, ...
                              0.584725577796069];
                    case 0.20 % Fifth-order fit for this CI and lower
                        a = [-0.181472620363891,  1.256475870342414, ...
                             -3.061039497840780,  2.919822186415337, ...
                             -1.194486262797910,  0.177058799515189];
                    case 0.15
                        a = [-0.420983734564839,  1.719704888945268, ...
                             -3.185553283699459,  2.717388683876611, ...
                             -1.055519233252365,  0.152280792265534];
                    case 0.10
                        a = [-0.484157000905238,  1.805511528547629, ...
                             -3.009597793502394,  2.413940926662708, ...
                             -0.907472834957945,  0.128736345745157];
                    case 0.05
                        a = [0.495678255674827,  -1.578485655721780, ...
                             1.795580114905502,  -0.968814830058932, ...
                             0.258413086569218,  -0.028284942140291];
                    case 0.02
                        a = [0.476526982799517,  -1.587164762114232, ...
                             2.018900121908464,  -1.265991949896407, ...
                             0.398510615625235,  -0.050813506157419];
                    case 0.01
                        a = [0.256441181941534,  -0.849004732555453, ...
                             1.074804143866533,  -0.671329571198641, ...
                             0.211159099801663,  -0.027048666235445];
                    case 0.005
                        a = [ 0.144162197537562, ...
                             -0.474388122123499, ...
                              0.597706488243238, ...
                             -0.371909768273449, ...
                              0.117107344125831, ...
                             -0.015145352065288];
                    case 0.002 
                        a = [ 0.079454584529314, ...
                             -0.259891985015904, ...
                              0.326813822787384, ...
                             -0.203408863214853, ...
                              0.064616154839145, ...
                             -0.008547296167329];
                    case 0.001 
                        a = [ 0.058529799673478, ...
                             -0.190825882043407, ...
                              0.240096262204243, ...
                             -0.149812010419639, ...
                              0.048020986353517, ...
                             -0.006471961959462];
                    otherwise
                        error('CI = %5.3f is not available for D closure', CI)
                end
                eta1 = polyval(a, Evals(1));
                % Keep eta1 above the lower bound when lambda1 -> 1
                eta1 = max(eta1, (Evals(1)^2 - Evals(1))/2); 
                A4(1,1) = Evals(1) * (1+Evals(1)) / 2     + eta1;
                A4(2,2) = (1-Evals(1)) * (2-Evals(1)) / 2 + eta1;
                A4(3,3) = Evals(1) * (1-Evals(1)) / 2     - eta1;  
                
            case 'E'   % --- Ellipse-radius closure
                % Coefficients of 7th-order polynomial fit for eta1(lambda)
                % These are arranged in descending order.
                a = 1.0e+03 * ...
                    [0.270437721423164, -1.352271527873442, ...
                     2.874925138296095, -3.366900521987799, ...
                     2.344739640357348, -0.970721973744398, ...
                     0.221194330321425, -0.021402806792392];
                eta1 = polyval(a, Evals(1));
                A4(1,1) = Evals(1) * (1+Evals(1)) / 2     + eta1;
                A4(2,2) = (1-Evals(1)) * (2-Evals(1)) / 2 + eta1;
                A4(3,3) = Evals(1) * (1-Evals(1)) / 2     - eta1;  
                
            case 'F'   % --- Fitted non-orthotropic closure
                if nargin >= 4
                    CI = varargin{1};
                    D  = varargin{2};
                else
                    error('Must supply CI and D for F type closure')
                end
                % Determine phid, the angle between the primary
                % eigenvectors of D and A.
                if Evals(1) <= 0.5001
                    phid = 0; % When eigenvectors of A are indeterminate
                else
                    [~, dvec] = eigsort(D); % Eigenvectors of D
                    dbar = R' * dvec(:,1);  % Principal eigenvector in A coords
                    phid = atan(dbar(2)/dbar(1)); % Angle between e-vectors
                end
                switch CI % Set the polynomical coefficients for the fit
                    case 0.001
                        % For this CI, use tend = 120, n1 = n2 = 4,
                        % alpha = [-0.8, 0, 0.15, 0.3, 0.5, 0.7, 1]
                        a1 = [ 0.009538428649887, ...
                              -0.082320173242174, ...
                               0.142705641312321, ...
                               0.229970640469792, ...
                              -0.556866289507015, ...
                              -0.090536537627230, ...
                              -0.256301126922247, ...
                               0.687256217052525, ...
                               0.252415001573597, ...
                               0.016222555238588, ...
                               0.098666219504530, ...
                              -0.273932088747423, ...
                              -0.156318457286965, ...
                              -0.028861436394185, ...
                              -0.000230362060254];
                        a2 = [-0.000000000000004, ...
                               0.000000000000023, ...
                               0.025900055946652, ...
                              -0.000000000000048, ...
                              -0.118409045621678, ...
                               0.019640248720560, ...
                               0.000000000000043, ...
                               0.160427878361174, ...
                              -0.022197369696556, ...
                              -0.027486745359805, ...
                              -0.000000000000014, ...
                              -0.066943399601253, ...
                              -0.004069550081749, ...
                               0.036226516816002, ...
                               0.003315677284446];
                    case 0.002 
                        % For this CI, use tend = 90, n1 = n2 = 4,
                        % alpha = [-0.8, 0, 0.15, 0.3, 0.5, 0.7, 1]
                        a1 = [ 0.033447297803711, ...
                              -0.224452646187914, ...
                               0.178284975214835, ...
                               0.538624101895559, ...
                              -0.696409248085899, ...
                              -0.117973531184786, ...
                              -0.545479028434607, ...
                               0.859204302717713, ...
                               0.334579743251723, ...
                               0.019579415664788, ...
                               0.196926053930923, ...
                              -0.342107670482854, ...
                              -0.210112798694088, ...
                              -0.037623970568673, ...
                               0.000294450222408];
                        a2 = [-0.000000000000000, ...
                               0.000000000000000, ...
                               0.023666361100338, ...
                              -0.000000000000000, ...
                              -0.121780285812473, ...
                               0.043924927192086, ...
                              -0.000000000000000, ...
                               0.180831694176188, ...
                              -0.079814948645242, ...
                              -0.041114127715898, ...
                               0.000000000000000, ...
                              -0.081147081770832, ...
                               0.024632046040990, ...
                               0.057372709716546, ...
                               0.004324022548160];
                    case 0.005 
                        % For this CI, use tend = 60, n1 = n2 = 4,
                        % alpha = [-0.8, 0, 0.15, 0.3, 0.5, 0.7, 1]
                        a1 = [ 0.072972749342372, ...
                              -0.457502113758770, ...
                               0.223971566344644, ...
                               1.041112505609127, ...
                              -0.883619595345284, ...
                              -0.148373546043702, ...
                              -1.013013532772434, ...
                               1.101996039193085, ...
                               0.435085948598223, ...
                               0.018593970854330, ...
                               0.354029963700569, ...
                              -0.443051280704663, ...
                              -0.284659611112398, ...
                              -0.040748926579936, ...
                               0.001407335279887];
                        a2 = [-0.000000000000008, ...
                               0.000000000000048, ...
                               0.023110612136051, ...
                              -0.000000000000099, ...
                              -0.148036583411973, ...
                               0.096428617163637, ...
                               0.000000000000089, ...
                               0.253154084640247, ...
                              -0.206921828283670, ...
                              -0.069927032703069, ...
                              -0.000000000000030, ...
                              -0.125571978756225, ...
                               0.090060353019026, ...
                               0.102722177276161, ...
                               0.006343053323605];
                    case 0.01
                        % Include alpha = -0.15; n1 = n2 = 3
                        % tend = 40, 
                        a1 = [ 0.035804732939210, ...
                              -0.149626963392327, ...
                              -0.051142582981463, ...
                               0.203114152860113, ...
                               0.170571684992347, ...
                              -0.007347386969232, ...
                              -0.094158315664600, ...
                              -0.121265464027358, ...
                              -0.008604007146211, ...
                               0.006830403092987];
                        a2 = [-0.000000000000000, ...
                               0.000000000000001, ...
                               0.048101745049014, ...
                              -0.000000000000001, ...
                              -0.111519485384621, ...
                              -0.050232266936576, ...
                               0.000000000000000, ...
                               0.058567452936867, ...
                               0.068245017217352, ...
                               0.008068356754193];
                    case 0.02  % tend = 40
                        a1 = [ 0.060700932341123, ...
                              -0.262513544464588, ...
                              -0.079267363709827, ...
                               0.372699512734890, ...
                               0.261724215265730, ...
                              -0.004790400322970, ...
                              -0.180952306340414, ...
                              -0.188192970991497, ...
                              -0.017209185038501, ...
                               0.007774999193778];
                        a2 = [-0.000000000000000, ...
                               0.000000000000002, ...
                               0.074160907284520, ...
                              -0.000000000000003, ...
                              -0.191986858899684, ...
                              -0.060727816545859, ...
                               0.000000000000001, ...
                               0.114029708540752, ...
                               0.093066532364097, ...
                               0.006668340896782];
                    case 0.05 % tend = 25
                        a1 = [ 0.022055807844058, ...
                              -0.128088250927866, ...
                              -0.066051712432258, ...
                               0.256070116768726, ...
                               0.213151986979970, ...
                               0.000131040361229, ...
                              -0.176233692578450, ...
                              -0.159090935595614, ...
                              -0.010465150675530, ...
                               0.003337292641291];
                        a2 = [ 0.000000000000000, ...
                              -0.000000000000001, ...
                               0.114253184223747, ...
                               0.000000000000002, ...
                              -0.336527683573667, ...
                              -0.063075255114189, ...
                              -0.000000000000001, ...
                               0.237299343160882, ...
                               0.106803027762757, ...
                               0.003856824742049];
                    case 0.10 % tend = 20
                        a1 = [ 0.019890708245766, ...
                              -0.159209763509242, ...
                              -0.043240459592974, ...
                               0.389882341934165, ...
                               0.133911393980438, ...
                               0.006665826473889, ...
                              -0.302051295797491, ...
                              -0.099071853048196, ...
                              -0.013108506538793, ...
                               0.000398850419883];
                        a2 = [-0.000000000000000, ...
                               0.000000000000000, ...
                               0.116173173629593, ...
                              -0.000000000000001, ...
                              -0.385866574361599, ...
                              -0.035255242652313, ...
                               0.000000000000000, ...
                               0.316516903526323, ...
                               0.063463668064524, ...
                               0.001117388647865];
                    case 0.20 % tend = 15
                        a1 = [ 0.044898162522329, ...
                              -0.324099537886307, ...
                              -0.033108651473077, ...
                               0.748401590112668, ...
                               0.106819693825851, ...
                               0.005968538052819, ...
                              -0.559590328858742, ...
                              -0.084549003871309, ...
                              -0.010834215699254, ...
                               0.000037771380310];
                        a2 = [ 0.000000000000000, ...
                              -0.000000000000000, ...
                               0.127894853515253, ...
                               0.000000000000000, ...
                              -0.451676669652996, ...
                              -0.024779094548471, ...
                              -0.000000000000000, ...
                               0.397532550955958, ...
                               0.045730908345474, ...
                               0.000487287059627];
                    case 0.50  % tend = 10
                        a1 = [ 0.121501180378603, ...
                              -0.796734498515020, ...
                              -0.023520122816258, ...
                               1.722431676191736, ...
                               0.081593985357555, ...
                               0.006237630801392, ...
                              -1.229934801352214, ...
                              -0.070590770284053, ...
                              -0.011696045310269, ...
                               0.000147699839169];
                        a2 = [-0.000000000000000, ...
                               0.000000000000000, ...
                               0.123738505589961, ...
                              -0.000000000000001, ...
                              -0.464903694803791, ...
                              -0.011142661424308, ...
                               0.000000000000000, ...
                               0.436703669199981, ...
                               0.021156279144304, ...
                               0.000157972702437];
                    case 1.0  % tend = 5
                        a1 = [ 0.245884471180075, ...
                              -1.551354770457943, ...
                              -0.019222141222164, ...
                               3.250464984520042, ...
                               0.069444933483901, ...
                               0.006347173102545, ...
                              -2.262586656648907, ...
                              -0.062697535366759, ...
                              -0.012011763543133, ...
                               0.000082250477826];
                        a2 = [-0.000000000000000, ...
                               0.000000000000000, ...
                               0.122571782822902, ...
                              -0.000000000000000, ...
                              -0.473909531777294, ...
                              -0.004031311362639, ...
                               0.000000000000000, ...
                               0.458174350832327, ...
                               0.007638799619176, ...
                               0.000273825233907];
                    otherwise
                        error('CI = %5.3f is not available for F closure', CI)
                end
                eta1 = polyval2(a1, Evals(1), abs(phid));
                eta2 = polyval2(a2, Evals(1), abs(phid)) * sign(phid);
                % Keep |eta| within the bounds of physical A4 tensors
                eta    = sqrt(eta1^2 + eta2^2);
                etamax = (Evals(1) - Evals(1)^2) / 2;
                if eta > etamax
                    eta1 = eta1 * etamax/eta;
                    eta2 = eta2 * etamax/eta;
                end
                % Components of A4 in principal coordinates
                A4(1,1) = Evals(1) * (1+Evals(1)) / 2     + eta1;
                A4(2,2) = (1-Evals(1)) * (2-Evals(1)) / 2 + eta1;
                A4(3,3) = Evals(1) * (1-Evals(1)) / 2     - eta1;  
                A4(1,3) =  eta2;
                A4(2,3) = -eta2;
                
            otherwise
                fprintf(1,...
                'closeA4planar.m: %c is not a legal value of VERSION\n', ...
                version);
                
        end
        
        %-- Fill in remaining principal components by symmetry
        A4(1,2) = A4(3,3);
        A4(2,1) = A4(1,2);
        A4(3,1) = A4(1,3);
        A4(3,2) = A4(2,3);
        
        %--- Rotate back to laboratory axes
        A4 = rotate4(A4, R);
        
        
end  % ends the switch statement from the top of the file

end
